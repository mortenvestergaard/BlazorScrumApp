@page "/"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.State == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.SectionName</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="KanbanTaskItem" Identifier="@item.SectionName" Class="mud-height-full" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation="25" Class="pa-2 rounded-lg">
						<MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
						<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Title</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	/*Maybe should not be nullable?*/
	private MudDropContainer<KanbanTaskItem>? _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.State = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections("ToDo", false, String.Empty),
			new KanBanSections("InProcess", false, String.Empty),
			new KanBanSections("Pending", false, String.Empty),
			new KanBanSections("Done", false, String.Empty),
		};

	public class KanBanSections
	{
		public string SectionName { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string sectionName, bool newTaskOpen, string newTaskName)
		{
			SectionName = sectionName;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}

	public enum State {
		Backlog = 1,
		ToDo = 2,
		InProgress = 3,
		Pending = 4,
		Done = 5,
	}

	public class User {
		public int Id { get; set; }
		public string? Username { get; set; }
	}

	public class KanbanTaskItem
	{
		public int? Id { get; set; }
		public string? Title { get; init; }
		public string? Description { get; set; }
		public string State { get; set; }
		public User? AssignedTo { get; set; }
		public User? Reporter { get; set; }


		public KanbanTaskItem(int id, string title, string description, string state, User assignedTo, User reporter)
	{
			Id = id;
			Title = title;
			Description = description;
			State = state;
			AssignedTo = assignedTo;
			Reporter = reporter;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
	{
		//new KanbanTaskItem("Write unit test", "To Do"),
		//new KanbanTaskItem("Some docu stuff", "To Do"),
		//new KanbanTaskItem("Walking the dog", "To Do"),
	};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}


	private void AddTask(KanBanSections section)
	{

		_tasks.Add(new KanbanTaskItem(1, section.NewTaskName, "New description", section.SectionName, null, null));
		KanbanTaskItem newTask = new KanbanTaskItem(1, section.NewTaskName, "New description", section.SectionName, null, null);
		var response = Http.PostAsJsonAsync("http://localhost:5112/api/Tasks/PostTask", newTask);
			
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.State == section.SectionName);
			foreach (var item in tasks)
			{
				item.State = _sections[newIndex].SectionName;
			}
		}
	}
}