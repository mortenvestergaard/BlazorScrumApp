@page "/"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using BlazorScrumApp.Models
@using BlazorScrumApp.Services
@using System.Threading.Tasks
@inject HttpClient Http
@inject ScrumboardService boardService
@inject IDialogService DialogService

<MudDropContainer T="ScrumTask" Items="_tasks" @ref="_dropContainer" ItemsSelector="@((item,column) => item.State.Name == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="ScrumTask" Identifier="@item.Name" Class="mud-height-full" />
				@if (!item.NewTaskOpen)
				{

						<MudButton OnClick="@(() => AddTask(item))" StartIcon="@Icons.Filled.Add" Color="Color.Primary" FullWidth="true">Add Task</MudButton>

				}

			</MudPaper>
		}

		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newState" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newState.Name" For="@(() => newState.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
			<MudText Typo="Typo.body2">@($"{context.Title} + {context.State.Name}")</MudText>
		<MudButton OnClick="@(() => OnEditTask(context))" Color="Color.Error">Edit</MudButton>
		</MudPaper>
	</ItemRenderer>
</MudDropContainer>

	@code {
	/*Maybe should not be nullable?*/
	private MudDropContainer<ScrumTask>? _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private async void TaskUpdated(MudItemDropInfo<ScrumTask> info)
	{

		info.Item.State.Name = info.DropzoneIdentifier;
		await boardService.UpdateTask(info.Item);
	}

	private List<State> _sections = new()
	{

	};

	private List<User> _users = new();

	private List<ScrumTask> _tasks = new()
	{

	};


	protected override async Task OnInitializedAsync()
	{
		var states = await boardService.GetStates();
		_sections.AddRange(states);
		var users = await boardService.GetUsers();
		_users.AddRange(users);
		var tasks = await boardService.GetTasks();
		_tasks.AddRange(tasks);

	}

	State newState = new State();
	private async Task OnValidSectionSubmit(EditContext context)
	{
		State newState = new State();
		await boardService.CreateState(newState);
		_sections.Add(newState);
		newState = new State();
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{

		_addSectionOpen = true;
	}

	private async void OnEditTask(ScrumTask task) 
	{
		await boardService.UpdateTask(task);
	}

	private async void AddTask(State section)
	{
		var parameters = new DialogParameters();
		parameters.Add("SelectedState", section);
		parameters.Add("Users", _users);
		parameters.Add("BoardId", 1);

		var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
		var result = DialogService.Show<NewTaskDialog>("Simple Dialog", parameters, options);
		var resultData = await result.Result;
		ScrumTask newTask = (ScrumTask)resultData.Data;
		await boardService.CreateTask(newTask);
		_tasks.Add(newTask);
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(State section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.State.Name == section.Name);
			foreach (var item in tasks)
			{
				item.State.Name = _sections[newIndex].Name;
			}
		}
	}
}