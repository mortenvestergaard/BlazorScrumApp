@page "/"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using BlazorScrumApp.Models
@using BlazorScrumApp.Services
@using System.Threading.Tasks
@inject HttpClient Http
@inject ScrumboardService boardService

<MudDropContainer T="Models.Task" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.State.Name == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="Models.Task" Identifier="@item.Name" Class="mud-height-full" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation="25" Class="pa-2 rounded-lg">
						<MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
						<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newStateModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newStateModel.Name" For="@(() => newStateModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Title</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	/*Maybe should not be nullable?*/
	private MudDropContainer<Models.Task>? _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<Models.Task> info)
	{
		info.Item.State.Name = info.DropzoneIdentifier;
	}

	/* Setup for board  */

	public class KanBanSections
	{
		public string SectionName { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string sectionName, bool newTaskOpen, string newTaskName)
		{
			SectionName = sectionName;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}

	private List<State> _sections = new()
	{

	};

	private List<User> _users = new();

	private List<Models.Task> _tasks = new()
	{
		//new KanbanTaskItem("Write unit test", "To Do"),
		//new KanbanTaskItem("Some docu stuff", "To Do"),
		//new KanbanTaskItem("Walking the dog", "To Do"),
	};


	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		//var states = await boardService.GetStates();
		//var tasks = await boardService.GetTasks();
		//var users = await boardService.GetUsers();
		//_sections.AddRange(states);
		//_users.AddRange(users);
		//_tasks.AddRange(tasks);

	}

	State newStateModel = new State();

	private async System.Threading.Tasks.Task OnValidSectionSubmit(EditContext context)
	{
		State newState = new State();
		await boardService.CreateState(newState);
		_sections.Add(newState);
		newStateModel = new State();
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}


	private void AddTask(State section)
	{

		//_tasks.Add(new KanbanTaskItem(1, section.NewTaskName, "New description", section.SectionName, null, null));
		//KanbanTaskItem newTask = new KanbanTaskItem(1, section.NewTaskName, "New description", section.SectionName, null, null);
		//var response = Http.PostAsJsonAsync("http://localhost:5112/api/Tasks/PostTask", newTask);
			
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(State section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.State.Name == section.Name);
			foreach (var item in tasks)
			{
				item.State.Name = _sections[newIndex].Name;
			}
		}
	}
}