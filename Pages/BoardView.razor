@page "/"
@page "/boardview"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using BlazorScrumApp.Models
@using BlazorScrumApp.Services
@using System.Threading.Tasks
@using Blazored.Toast
@using Blazored.Toast.Services
@inject HttpClient Http
@inject ScrumboardService boardService
@inject IDialogService DialogService
@inject IToastService toastService

<MudDropContainer T="ScrumTask" Items="_tasks" @ref="_dropContainer" ItemsSelector="@((item,column) => item.State.Name == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                    <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
                    </MudMenu>
                </MudToolBar>
                <MudDropZone T="ScrumTask" Identifier="@item.Name" Class="mud-height-full" />
                @if (!item.NewTaskOpen)
                {

                    <MudButton OnClick="@(() => AddTask(item))" StartIcon="@Icons.Filled.Add" Color="Color.Primary" FullWidth="true">Add Task</MudButton>

                }

            </MudPaper>
        }

        <MudPaper Class="pa-4" Elevation="0" Width="224px">
            @if (_addSectionOpen)
            {
                <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                    <EditForm Model="@newState" OnValidSubmit="OnValidSectionSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField @bind-Value="newState.Name" For="@(() => newState.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
                        <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
                    </EditForm>
                </MudPaper>
            }
            else
            {
                <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
            }
            <MudButton OnClick="ClearBoard" Variant="Variant.Outlined" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Clear Board</MudButton>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
            <MudText Typo="Typo.h6">@($"{context.Title}")</MudText>
                <MudText Typo="Typo.body2">@context.Description</MudText>
                <MudButton OnClick="@(() => OnEditTask(context))" Variant="Variant.Filled" Color="Color.Info" DisableRipple="true">Edit</MudButton>
                <MudButton OnClick="@(() => OnDeleteTask(context))" Variant="Variant.Filled" Color="Color.Warning" DisableRipple="true">Delete</MudButton>
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>

    @code {
    private MudDropContainer<ScrumTask>? _dropContainer;

    /* handling board events */
    private async void TaskUpdated(MudItemDropInfo<ScrumTask> info)
    {

        info.Item.State.Name = info.DropzoneIdentifier;
        info.Item.StateID = _sections.Find(e => e.Name == info.Item.State.Name).Id;
        info.Item.State.Id = info.Item.StateID;
        await boardService.UpdateTaskState(info.Item);
        _dropContainer.Refresh();
    }

    //Contains stats from the database
    private List<State> _sections = new();

    //Contains users from the database
    private List<User> _users = new();

    //Contains the tasks from the database
    private List<ScrumTask> _tasks = new();


    //Calls the database to fill out the lists to create the scrumboard when site is initialized
    protected override async Task OnInitializedAsync()
    {
        var states = await boardService.GetStates();
        _sections.AddRange(states);
        var users = await boardService.GetUsers();
        _users.AddRange(users);
        var tasks = await boardService.GetTasks();
        _tasks.AddRange(tasks);

    }

    //When creating a new state/section
    State newState = new State();
    private async Task OnValidSectionSubmit(EditContext context)
    {
        State newState = new State();
        await boardService.CreateState(newState);
        _sections.Add(newState);
        newState = new State();
        _addSectionOpen = false;
    }

    //Creating a new state
    private bool _addSectionOpen;
    private void OpenAddNewSection()
    {

        _addSectionOpen = true;
    }

    //Called when clicking on the Edit button on a task
    private async void OnEditTask(ScrumTask task)
    {
        var parameters = new DialogParameters();
        parameters.Add("Task", task);
        parameters.Add("Users", _users);

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var result = DialogService.Show<EditTaskDialog>("Edit Task", parameters, options);

        var resultData = await result.Result;
        if (!resultData.Cancelled)
        {
            ScrumTask updatedTask = (ScrumTask)resultData.Data;
            ScrumTask taskFromApi = await boardService.UpdateTask(updatedTask);
            taskFromApi = _tasks.First(i => i.Id == taskFromApi.Id);
        }
        _dropContainer.Refresh();

    }

    //Called when the Clear Board button is clicked
    public async void ClearBoard()
    {
        await boardService.ClearBoard();
        _sections.RemoveRange(0, _sections.Count);
        _tasks.RemoveRange(0, _tasks.Count);
    }

    //Called when a new task is being created
    private async void AddTask(State section)
    {
        var parameters = new DialogParameters();
        parameters.Add("SelectedState", section);
        parameters.Add("Users", _users);
        parameters.Add("BoardId", 1);

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var result = DialogService.Show<NewTaskDialog>("Create Task", parameters, options);
        if (result != null)
        {
            var resultData = await result.Result;
            ScrumTask newTask = (ScrumTask)resultData.Data;
            var newTaskFromDb = await boardService.CreateTask(newTask);
            if (newTaskFromDb.Id != null)
            {
                _tasks.Add(newTaskFromDb);
                await boardService.SendEmailOnTaskCreated(newTask.Assignee);
                section.NewTaskName = string.Empty;
                section.NewTaskOpen = false;
            }
            _dropContainer.Refresh();
        }
    }

    //Called when the Delete button on a task is pressed
    private async void OnDeleteTask(ScrumTask task)
    {

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var result = DialogService.Show<DeleteTaskDialog>("Delete Task", options);
        var data = await result.Result;
        if (!data.Cancelled)
        {
            var resp = await boardService.DeleteTask(task);
            string respMsg = await resp.Content.ReadAsStringAsync();
            if (respMsg == "Ok")
            {
                _tasks.Remove(task);

            }
        }
        _dropContainer.Refresh();
    }

    //Called when clicking the little button on top of each section
    private async void DeleteSection(State section)
    {

        var dbResp = await boardService.DeleteState(section);
        string respMsg = await dbResp.Content.ReadAsStringAsync();
        if (respMsg == "Ok")
        {
            _sections.Remove(section);
        }
        _dropContainer.Refresh();
    }
}